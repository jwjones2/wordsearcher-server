// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wordsearcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordsearcherServiceClient is the client API for WordsearcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordsearcherServiceClient interface {
	// Unary - Verse
	Verse(ctx context.Context, in *VerseRequest, opts ...grpc.CallOption) (*VerseResponse, error)
	// Unary Search
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*VerseResponse, error)
	// Unary - Bible Plan
	BiblePlan(ctx context.Context, in *BiblePlanRequest, opts ...grpc.CallOption) (*BiblePlanResponse, error)
	BiblePlanDay(ctx context.Context, in *BiblePlanDayRequest, opts ...grpc.CallOption) (*BiblePlanDayResponse, error)
}

type wordsearcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordsearcherServiceClient(cc grpc.ClientConnInterface) WordsearcherServiceClient {
	return &wordsearcherServiceClient{cc}
}

func (c *wordsearcherServiceClient) Verse(ctx context.Context, in *VerseRequest, opts ...grpc.CallOption) (*VerseResponse, error) {
	out := new(VerseResponse)
	err := c.cc.Invoke(ctx, "/wordsearcher.WordsearcherService/Verse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsearcherServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*VerseResponse, error) {
	out := new(VerseResponse)
	err := c.cc.Invoke(ctx, "/wordsearcher.WordsearcherService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsearcherServiceClient) BiblePlan(ctx context.Context, in *BiblePlanRequest, opts ...grpc.CallOption) (*BiblePlanResponse, error) {
	out := new(BiblePlanResponse)
	err := c.cc.Invoke(ctx, "/wordsearcher.WordsearcherService/BiblePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsearcherServiceClient) BiblePlanDay(ctx context.Context, in *BiblePlanDayRequest, opts ...grpc.CallOption) (*BiblePlanDayResponse, error) {
	out := new(BiblePlanDayResponse)
	err := c.cc.Invoke(ctx, "/wordsearcher.WordsearcherService/BiblePlanDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordsearcherServiceServer is the server API for WordsearcherService service.
// All implementations must embed UnimplementedWordsearcherServiceServer
// for forward compatibility
type WordsearcherServiceServer interface {
	// Unary - Verse
	Verse(context.Context, *VerseRequest) (*VerseResponse, error)
	// Unary Search
	Search(context.Context, *SearchRequest) (*VerseResponse, error)
	// Unary - Bible Plan
	BiblePlan(context.Context, *BiblePlanRequest) (*BiblePlanResponse, error)
	BiblePlanDay(context.Context, *BiblePlanDayRequest) (*BiblePlanDayResponse, error)
	mustEmbedUnimplementedWordsearcherServiceServer()
}

// UnimplementedWordsearcherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWordsearcherServiceServer struct {
}

func (UnimplementedWordsearcherServiceServer) Verse(context.Context, *VerseRequest) (*VerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verse not implemented")
}
func (UnimplementedWordsearcherServiceServer) Search(context.Context, *SearchRequest) (*VerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedWordsearcherServiceServer) BiblePlan(context.Context, *BiblePlanRequest) (*BiblePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BiblePlan not implemented")
}
func (UnimplementedWordsearcherServiceServer) BiblePlanDay(context.Context, *BiblePlanDayRequest) (*BiblePlanDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BiblePlanDay not implemented")
}
func (UnimplementedWordsearcherServiceServer) mustEmbedUnimplementedWordsearcherServiceServer() {}

// UnsafeWordsearcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordsearcherServiceServer will
// result in compilation errors.
type UnsafeWordsearcherServiceServer interface {
	mustEmbedUnimplementedWordsearcherServiceServer()
}

func RegisterWordsearcherServiceServer(s grpc.ServiceRegistrar, srv WordsearcherServiceServer) {
	s.RegisterService(&WordsearcherService_ServiceDesc, srv)
}

func _WordsearcherService_Verse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordsearcherServiceServer).Verse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordsearcher.WordsearcherService/Verse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordsearcherServiceServer).Verse(ctx, req.(*VerseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordsearcherService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordsearcherServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordsearcher.WordsearcherService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordsearcherServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordsearcherService_BiblePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiblePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordsearcherServiceServer).BiblePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordsearcher.WordsearcherService/BiblePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordsearcherServiceServer).BiblePlan(ctx, req.(*BiblePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordsearcherService_BiblePlanDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiblePlanDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordsearcherServiceServer).BiblePlanDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordsearcher.WordsearcherService/BiblePlanDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordsearcherServiceServer).BiblePlanDay(ctx, req.(*BiblePlanDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WordsearcherService_ServiceDesc is the grpc.ServiceDesc for WordsearcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordsearcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wordsearcher.WordsearcherService",
	HandlerType: (*WordsearcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verse",
			Handler:    _WordsearcherService_Verse_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _WordsearcherService_Search_Handler,
		},
		{
			MethodName: "BiblePlan",
			Handler:    _WordsearcherService_BiblePlan_Handler,
		},
		{
			MethodName: "BiblePlanDay",
			Handler:    _WordsearcherService_BiblePlanDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wspb/ws.proto",
}
